Bom, as condições são simples ou compostas.

As condições simples é:

Se algo for verdadeiro, alguma coisa acontece
E se for falso? Nada, segue o baile.




Ja a composta é:

Se algo for verdadeiro, alguma coisa acontece
E se for falso? Então essa outra coisa aqui acontece.

Duas situações né? Mas e se houver mais de duas opções?

Podemos aninhar condições umas dentro das outras.
Só olhar a imagem "Condições Aninhadas.png" pra entender dentro da pasta de anotações do nosso Módulo do Curso.

Nessa imagem, há três possibilidades, Se W coisa acontecer, X coisa acontece, mas e se W for falso? Então Y ou Z irá acontecer.
Há até mesmo a possibilidade de adicionar mais duas condições nas condições que ja estão aninhadas. Não há um limite per se.

É bem comum na real. Vamos falar por códigos:

if (cond1) {		//Se a condição 1 for verdadeiro
	bloco1			//Bloco1 roda
} else {			//	SENÃO
	if (cond2) {	//condição2 é analisada
		bloco2		//E se o bloco2 for falso...
		} else {	//
			bloco3	//bloco3 roda.
			}
			
Isso é uma condição aninhada. Pode parecer confuso aqui, mas veja a imagem Condição "Aninhada2.png" na pasta do módulo.

Que tal a gente dar bom dia ou boa tarde ou boa noite?

Seria fácil demais fazer isso apenas colocando numeros fixos e coisa e tal. Bora pegar a hora do computador:
var agora = new Date() //Sim, é Date(). O Date() é uma função que tem data hora e coisa e tal.
var hora = agora.getHours()	//Aí aqui da função Date() pegamos a hora com outra função dentro da função
console.log(`Agora são exatamente${hora} horas!`)

eee pronto. Só fazer as condições agora pra manhã tarde noite e talvez madrugada se tu quiser.

Além da condição simples composta e aninhada, há também a condição Múltipla:
Ela serve para valores fixos. Ela não serve muito para intervalos de valores como exemplificado anteriormente com o bom dia/tarde/noite.

Ela não tem apenas a possibilidade "Sim" ou "Não". Ela tem a possibilidade de outros valores, valores fixos.

Se for um determinado valor, faz um bloco, se for outro valor, faz outro, se for outro, outro bloco... E aí volta pro fluxo normal do programa.

Ela não é aplicada para todo tipo de situação como o "if" e "else if", mas ela é muito útil para situações específicas, pontuais. Veja a imagem de Condição Múltipla na pasta do curso.

É representado pelo comando switch!

switch (expressão) {  //Note que não é uma condição, e sim uma expressão.
	case valor1:
		bloco
		break
	
	case valor2:
		bloco
		break

	case valor3:
		bloco
		break
	
	default:	
		bloco
		break
}		

Repare que o último é um "default". Esse é opcinal. É como se fosse um "else". Se nenhum dos valores anteriores for acionado, este será.

Note também que há um "break" em todos. Isso vem lá da linguagem C (que como você deve lembrar (ou não), Javascript veio da linguagem C), portanto, é obrigatório até que alguma versão nova simplifique essa parada. 
Mas porque tem essa merda?

Vamos supor que não haja esse break no case 1, e o valor da expressão seja verdadeiro no bloco1. Se não houver esse break, o programa irá continuar pro case2 e case3 e por aí vai, até achar um break. Portanto, o break é obrigatório. Veja a imagem "switch" na pasta do módulo.

Se você tiver que testar entre uma coisa e outra, você não vai utilizar o switch, e sim o "if" e "else if". O switch, como eu disse, é para situações pontuais.
