Eventos DOM
<div>

Evento é tudo o que possa acontecer com essa <div>.
O que pode acontecer com essa div? Um monte de coisa. O mais comum? Eventos de mouse:
	*Eu posso por exemplo mover o mouse até chegar dentro da div. Quando chegar dentro da div, vai disparar um evento chamado "mouseenter".
	*Movendo o mouse dentro da div, vai disparar o evento "mousemove" que disparará enquanto você mover o mouse.
	*Se eu clicar e segurar com o clique, vai disprar o evento "mousedown".
	*Quando eu soltar, dispara o evento "mouseup"
	*Se eu apenas clicar, evento "click".
	*Se eu tirar o mouse de dentro da div, dispara o evento "mouseout"
Há milhares de milhares de eventos. 
Segue o site: https://developer.mozilla.org/pt-BR/docs/Web/Events
Hoje em dia existe até mesmo o "touchevents" que são diferentes dos "mouseevents". Imagino que seja pras telas sensíveis ao toque.



Mas pra disparar um evento, tratar um evento, é preciso explicar o que é Função.

Uma função em Javascript é um conjunto de códigos, um conjunto de linhas que vão ser executados só quando um evento ocorrer.

Eu vou por exemplo programar 10 linhas. Essas 10 linhas a gente chama de bloco.
Essas 10 linhas não serão executadas automaticamente. Agora, essa 10 linhas, esse bloco, só vai ocorrer por exemplo quando eu clicar dentro da div. Ou seja, somente quando o evento ocorrer.

Pra eu executar essas 10 linhas somente quando o evento ocorrer, o primeiro passo é colocar ela dentro de um bloco.

Um bloco em Javascript é delimitado entre os sinais de chave ("{}"):

{
bloco
}

Esse bloco você tem que nomear ele como function, então voce bota a palavra function antes do bloco:

function {

}

No javascript existe isso daí ^, função anônima. Uma função que simplesmente não tem nome. SÓ QUE, para que o método possa funcionar, eu tenho que dar um nome para essa função. E geralmente os nomes das funções são ações que a gente pode fazer:

function ação() {

}

Você vai botar o nome da ação que vai acontecer, abre e fecha parênteses ("()") e OPCIONALMENTE, dentro desses parênteses irá ter alguns parâmetros. Pode ter 1, pode ter vários.

Vamos fazer agora disparar um evento de click. Dá pra fazer isso na parte HTML e na parte SCRIPT:

<body>
	<div> id="area"² onclick="clicar()"¹>				//quando eu CLICAR¹↓ dentro da DIV² uma ação é disparada
		Interaja...
</body>



Utilizando o script:
//Tudo que estiver entre "{}" só vai ser disparado quando eu chamar a função "clicar()"


<body>
	<div> id="area" onclick="clicar()">
		Interaja...
		
	<script>												//Criamos a tag <script>
		function clicar() { 	//Aqui eu chamo a função do evento que eu criei anteriormente. No caso, ao clicar, o evento entre "{}" é disparado
		var a = window.document.getElementById('area')		//Aqui eu crio uma variável e seleciono a minha div pelo Id que dei a ela, no caso "area"
		a.innerText = 'Clicou!'								//Aqui é o que acontece ao disparar o evento, no caso, clicar. O texto será alterado de
															//"Interaja" para "Clicou!
		}
	</script>
</body>



Vamos fazer mais um evento e fazê-lo disparar:



<body>
	<div> id="area" onclick="clicar()" onmouseover="entrar()">	//mouseover="entrar()". Isto é, quando eu passar o mouse por cima, um evento ocorre
		Interaja...
		
	<script>												
		¹var a = window.document.getElementById('area')	//Variável fora das funções. Não é o ideal pois pode ocorrer vários problemas de uso de memória
		
		function clicar() { 	
		
		a.innerText = 'Clicou!'								
		}
		
		function entrar() {		//É necessário sempre chamar a função. CUIDADO pra não chamar uma função dentro de um bloco ("{}") de outra função.
		
		a.innerText = 'Entrou!' 
		
		}
		
		

	</script>
</body>


Você deve ter percebido algo engraçado. Uma função não consegue acessar a variável de outra função. O que se pode fazer então, mas que não é o ideal porque pode ter vários problemas de uso de memória, é colocar logo a variável que será usada várias vezes, fora¹ das funções.


Vamos fazer mais uma vez, com outro evento/função:


<body>
	<div> id="area" onclick="clicar()">
		Interaja...
		
	<script>												//Criamos a tag <script>
		function clicar() { 	//Aqui eu chamo a função do evento que eu criei anteriormente. No caso, ao clicar, o evento entre "{}" é disparado
		var a = window.document.getElementById('area')		//Aqui eu crio uma variável e seleciono a minha div pelo Id que dei a ela, no caso "area"
		a.innerText = 'Clicou!'								//Aqui é o que acontece ao disparar o evento, no caso, clicar. O texto será alterado de
															//"Interaja" para "Clicou!
		}
	</script>
</body>



Vamos fazer mais um evento e fazer com que dispare, e com cada coisa disparada, algo aconteça:



<body>
	<div> id="area" onclick="clicar()" onmouseover="entrar()" onmouseout="sair()">	//Quando o mouse sair...
		Interaja...
		
	<script>												
		var a = window.document.getElementById('area')	//Do lado de fora para servir para todas as 3 funções.
		
		function clicar() { 	
		
		a.innerText = 'Clicou!'				//Ao clicarm o texto mudará para "Clicou!"...
		
		a.style.background = 'lightblue';	//A cor do fundo mudará para azul claro...
		a.style.color = 'purple';			//E a cor do texto ficará roxa.
		
		}
		
		function entrar() {		
		
		a.innerText = 'Entrou!' 			//Quando o mouse entrar na área, o texto mudará para "Entrou!"
		
		a.style.background = 'red'			//O fundo ficará vermelho
		a.style.color = 'yellow'			//E a cor do texto ficará amarelo
		
		}
		
		function sair() {	//Sempre chamar função
		
		a.innerText = 'Saiu!'				//Quando o mouse sair da área, o texto mudará para "Saiu!"...
		
		a.style.background = 'purple';		//A cor do fundo mudará para roxo
		a.style.color = 'lightblue'			//E a cor do texto mudará para azul claro!
		
		}

	</script>
</body>

Foi bastante coisa agora. Viu que o HTML (a parte ali do <div id="area"...) ficou até poluído né? Dá pra simplificar isso também, e deixar o código menos poluído.

SEMPRE SE POSSÍVEL, DEIXE O CÓDIGO LINDO! biuriful. biuriful eh lind



<body>
	<div> id="area">	//Limpamos o HTML, deixando apenas o Id.
		Interaja...
		
	<script>												
		var a = window.document.getElementById('area')	
		
		a.addEventListener('click', clicar)
		a.addEventListener('mouseenter, entrar)
		a.addEventListener('mouseout', sair)
		
		/*
		Agora perceba que criamos mais 3 linhas de código. Os "Listeners"
		Essas linhas ficarão "ouvindo" (listening), prestando atenção no evento x y ou z
		dentro do próprio Javascript para quando for hora do evento ser executado
		*/
		
		function clicar() { 	
		
		a.innerText = 'Clicou!'				
		
		a.style.background = 'lightblue';	
		a.style.color = 'purple';			
		
		}
		
		function entrar() {		
		
		a.innerText = 'Entrou!' 			
		
		a.style.background = 'red'			
		a.style.color = 'yellow'			
		
		}
		
		function sair() {	
		
		a.innerText = 'Saiu!'
		
		a.style.background = 'purple';
		a.style.color = 'lightblue'		
		
		}

	</script>
</body>




É MUITA COISA AGORA NAS LINHAS DE CÓDIGOS!

é necessário agora prestar muita atenção. O VSCode não nos mostra o erro que ocorreu. Se você por exemplo trocar uma letra ou aumentar ou dimiuir uma letra, o código simplesmente NÃO vai rodar e NÃO vai mostrar mensagem de erro.

O que fazer nessa situação em que é uma caralhada de código e você não sabe onde errou?
Na maioria dos casos...

No site, botão direito do mouse > inspecionar elemento 
E lá já deve aparecer onde está o erro e em qual linha. Geralmente o erro está da linha determinada no DevTools pra cima.



Vamos interagir mais com o usuário agora.
Criaremos um novo exercício, dessa vez o ex007.html na pasta da aula 10
e faremos uma interaçãozinha de somar:


<!DOCTYPE html>
<html lang="pt-BR">		//Nunca esquecendo de mudar o idioma da page.
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Somando Números</title>		//Mudaremos o título da aba/page
    <style>							//*isso é só pra deixar bunitin, e mais pro fim da explicação*
        body {
            font: normal 18pt Arial;
        }
        input {
            font: normal 18pt Arial;
            width: 100px;
        }
        div#res {
            margin-top: 20px;
        }
    </style>
</head>
<body>
    <h1>Somando valores</h1>		//Criaremos o título
    <input type="number" name="txtn1" id="txtn1"> +  //E aqui é criado a caixinha pro usuário preencher com um número. Damos um name um id e pronto.
    <input type="number" name="txtn2" id="txtn2">	//novamente.
    <input type="button" value="somar" onclick="somar()">	//Aqui criamos o botão de somar com o evento de clique.
    <div id="res">Resultado</div>							//Criamos uma div pro resultado. Enquanto não houver resultado, ficará "Resultado" na página.
    <script>	//Agora, ao Javascript:
        function somar() { 		//Chamamos a função do botão
            var tn1 = window.document.getElementById('txtn1')		//Selecionamos o input do usuário
            var tn2 = window.document.querySelector('input#txtn2')  //Selecionamos o segundo input do usuário. Só o selecionei de forma diferente para mostrar que é possível.
            var res = window.document.getElementById('res')			//Agora, selecionamos a div...
            var n1 = Number(tn1.value)								
            var n2 = Number(tn2.value)			
			
			/*
			...E transformamos o input do usuário em numero. Quando vem de uma caixa de texto em que o usuário digita, o conteúdo (não o valor) da variável é uma STRING, não um NÚMERO. Portanto, "Number(tn1.value)" transforma o VALOR do CONTEÚDO em número.
			Deve ter como simplificar, mas deixamos isso mais pra frente.
			*/
			
            var s = n1 + n2
            res.innerHTML = `A soma entre o número ${n1} e o número ${n2} é igual a  <strong>${s}</strong>!`
			/*
			Pegamos a div anteriormente salva na memória da viarável "res" e também o código nela presente (<strong>) para escrever o resultado na página além de deixar ele em negrito.
			*/
        }

    </script>
</body>
</html>