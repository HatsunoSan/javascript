Agora, vamos aprender a manipular os dados.
Sabe o "window.prompt"? Antes a informação não ia pra lugar nenhum, agora, vamos aprender a salvar ela em algum lugar para utilizá-la mais tarde

Bom, é meio óbvio... Só colocar o código numa variável.
var nome = window.prompt('Qual o seu nome?')

Ta, beleza, mas e agora pra utilizar o dado dessa variável?
fazer isso?
	var nome = window.prompt('Qual o seu nome?')
	window.alert('Muito prazer em te conhecer, nome)
Não. É preciso concatenar.
	var nome = window.prompt('Qual o seu nome?')
	window.alert('Muito prazer em te conhecer, ' + nome)

	Isso é CONCATENAÇÃO						    ^ !!!!
E mano, muita atenção. é INCRÍVEL a quantidade de vezes que você vai confundir window(!) com windowS, chega a ser ridículo. 






Agora sobre SOMAS.

var n1 = window.prompt('Digite um número:')     // 5
var n2 = window.prompt('Digite outro número:') // 5
var s = n1 + n2
window.alert('A soma dos valores é ' + soma)

No seu coração, se eu somar assim ambas as variáveis, o resultado que vai aparecer no pop-up é 10, certo?
Certo apenas no seu coração. Aquele "+" Ali, é apenas CONCATENAÇÃO! Que no meeeu entendimento leeigo, serve apenas para jogar a informação da variável junto da string ou sei lá. O resultado seria esse:
'A soma dos valores é 55' // Pois é.

No Javascript, o sinal de "+" Serve para duas coisas: ADIÇÃO e CONCATENAÇÃO. E o Javascript diferencia ambos da seguinte forma:

number !+! number - Adição. // símbolo de "+" entre dois números. os "!!" é apenas para chamar a atenção do leitor, NÃO UTILIZE NO CÓDIGO.
string !+! string - Concatenação. // Símbolo de "+" entre duas strings.

Outra parada: "window.prompt('x')" retorna para mim uma STRING. Isso é uma característica do COMANDO! Ou seja,
"var n1" e "var n2" ambos são STRINGS, mesmo que haja números.
Então é preciso converter para NUMBER.

Mas como??? Há 3 formas:
String > Number

Number.parseInt(n)   - Para converter para INTEIRO!  // Ou simplesmente parseInt(n)
Number.parseFloat(n) - Para converter para FLOAT! // Ou simplesmente parseFloat(n)
"parse" é converter, "parsear".
CUIDADO QUE O JAVASCRIPT É MUITO CASE SENSITIVE!!!! ONDE FOR MAIÚSCULO DEIXE MAIÚSCULO! E ONDE FOR MINÚSCULO DEIXE MINÚSCULO!!!

E temos duas maneiras.
A primeira convertendo diretamente:

O que antes era assim:
var n1 = window.prompt('Digite um número:');

Passa a ser assim:
	Para inteiro: 
		var n1 = Number.parseInt(window.prompt('Digite um número:'));
	Para Float:
		var n1 = Number.parseFloat(window.prompt('Digite um número:));

Mas há uma limitação. Se ambos forem convertidos para inteiro, caso o usuário digite um número real (ou float se preferir chamar assim, como 5,5) a soma virá inteira. Então eu meio que o usuário tem que saber que código utilizado. Ainda bem que EU sou o usuário, né?
MAS, hoje em dia tem uma versão simplificada. A outra maneira. Simplesmente:

Number(n)

Incrível né?
Mas existir esse código simplificado não elimina os outros dois, pois pode existir situações em que seja preciso FORÇAR um número inteiro ("Number.parseInt(n)"), ou float ("Number.parseFloat(n)").





E PARA CONVERTER NÚMERO EM STRING? Duas formas:
Number > String

String(n)
n.toString()
Vamos aos exemplos.

var n1 = Number(window.prompt('Digite um número:');
var n2 = Number(window.prompt('Digite outro número:');
var soma = n1 + n2
window.alert('A soma dos valores é ', + soma);
// Esse é o código sem converter de string para número.

var n1 = Number(window.prompt('Digite um número:');
var n2 = Number(window.prompt('Digite outro número:');
var soma = n1 + n2
window.alert('A soma dos números é ' + string(soma)); 
//OU
window.alert('A soma dos números é ' + soma.toString());





Agora, vamos FORMATAR STRINGS!

ja aprendemos que*
var s = 'Javascript'
'Estou aprendendo !s!' // * Não funciona, né?
Vamos aprender a formatar essa merda.
Se liga na situação:

nome = 'Wolly'
idade = 21
nota = 10 // pq sou pica

Como fazer para que o programa me retorne a seguinte frase:
'o Aluno *Wolly de *21 anos tirou nota *10' ?
Aí você pensa, "ah, vou fazer assim:

'O aluno ' + nome + ' com ' + idade + ' anos tirou a nota ' + nota
	'O aluno Wolly com 21 anos tirou a nota 10'
	
Ok, funciona, mas olha a caralhada de Concatenação, pqp. Não.
Nas versões mais recentes do Javascript tem uma forma mais simples, e o nome dessa forma, dessa técnica é Templates Strings
se liga no exemplo:

'var s = 'Javascript'
`Eu estou aprendendo ${s}` // esse "${x}" é chamado de "Place Holder".
então, as informações anteriores, o código anterior, ficará da seguinte forma:

nome = 'Wolly'
idade = 21
nota = 10
`O aluno ${nome} de ${idade} anos tirou nota ${nota}.`
'O aluno Wolly de 21 anos tirou nota 10'

MAS ATENÇÃO!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
só funciona com Crase ("´´") invertida ("``").

Se o sinal de "+" é chamado de CONCATENAÇÃO, o Template String é chamado de INTERPOLAÇÃO!



saca:

s.lenght 		     // Quantos caracteres a string tem. 
s.toUpperCase()      // MANDA A STRING PARA MAIUSCULAS.
s.toLowerCase()      // manda a String para minúsculas.
document.write(`x`)  // Aparece uma mensagem no site. Não em pop-up. No site.

exemplo:

<script> 
	var nome = window.prompt('Digite seu nome') 
	//Wolly
	document.write(`Olá, ${nome}! Seu nome tem ${nome.lenght}.`) 
	// Quantos caracteres a string tem.
	document.write(`Seu nome em maiúsculas é ${nome.toUpperCase()}!`) // 
	Jogar para maiúsculo.
</script>
E vai sair assim: 

'Olá, Wolly! Seu nome tem 5 letras.Seu nome em maiúsculas é WOLLY!'

Ta colado. Ta na mesma linha. Ta estranho. Como resolve?
a gente pode fazer um "writeln":

document.writeln(`Olá, ${nome}...`);			
document.writeln(`Seu nome em maiúsculas...`) 
Assim, ambos não ficarão colados, mas estarão na mesma linha. Da um visu:

'Olá, Wolly! Seu nome tem 5 letras. Seu nome em maiúsculas é WOLLY!'

Bom, não ta colado. Como quebra a porra da linha?
podemos usar a quebra de linha do HTML, que pode ser usado no Javascript por aceitar tags. Segue o exemplo:

<script>
	var nome = window.prompt('Digite seu nome:')
	document.writeln(`Seu nome em maiúsculas é ${nome.toUpperCase()<br/>`)
</script>
esse "<br/>" no final AINDA DENTRO DA CRASE é uma TAG de HTML, e fará com que ocorra uma quebra de linha.





FORMATANDO NÚMEROS!!!!!!!!!!
Vamos criar a seguinte variável no NodeJS:
var n1 = 1545.5

como fazemos para que tenha duas casas decimais? Assim:

n1.toFixed(2)
'1545.50'

No Brasil usamos bastante vírgula, certo? Aqui normalmente diriámos 1545,50 e não 1545.50. Como alterar isso no Javascript? Assim:

n1.toFixed(2).replace('.' , ',')
'1545,50'

meio chatinho mas dá pra fazer isso. Não vai fazer em TODOS daí pra frente, só nessa variável em específico. o ".replace('x' , 'y') literalmente traduz-se como SUBSTITUI

E para mostrar'mos como o salário em real de alguém?
É um macetin até que BEM AVANÇADO, mas se liga:

var n1 = 1543.5
n1
'1545.5'
n1.toFixed(2)
'1543.50'
n1.toLocaleString('pt-BR', {style: 'currency', currency: 'BRL'})
'R$ 1.543,50'


vamos esmigalhar esse código.
n1.toLocaleString('pt-BR')
    //  ^ String localizada em alguma parte do mundo, no nosso caso, Brasil.
n1.toLocaleString('pt-BR', {style: 'currency'}
						   // ^ Entre chaves, pois é um objeto. "style: 'currency'" para mostrar em valor monetário.
n1.toLocaleString('pt-BR', {style: 'currency', currency: 'BRL'})
										  // ^ A partir da vírgula, estamos especificando que o valor monetário do "currency" será o do Brasil ("'BRL'")
se trocarmos o "BRL" por "USD", ficará em dólar, "EUR" em Euro...