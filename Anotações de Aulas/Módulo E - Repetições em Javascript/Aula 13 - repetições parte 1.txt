Os laços de repetições vão, basicamente, repetir comandos até determinado objetivo.
Imagina fazer um programa de comer pizza, e toda hora repetir o mesmo código "comer.pizza", "comer.pizza"... Até acabar a pizza? Pois é.
E ainda, e se a pizza for metade-metade e tem uma parte que eu nao goste?
além do "comer.pizza" vou ter que eu mesmo ir lá e "nao.comer"

foda.

O que a gente pode fazer?Repetições.
COMO?

function comerPizza() { // Função de comer pizza previamente criada.
	while (temFatia() { // Laço de repetição While.
	comerFatia()		// bloco da condição While com código/função de comer a fatia da pizza previamente criado.
	}
}

ali no while (que pode-se ler enquanto) ENQUANTO houver uma fatia, ele vai se repetir. Então eu não preciso ficar escrevendo o tempo todo a função "comerFatia()"

Quando a fatia acabar a função de "comerPizza()" termina.

Vamos levar isso pro Javascript de fato:




var c = 1 // Isso serve apenas para contar.
while (c <= 8) {	// Enquanto c for menor que 6, ele vai executar o bloco.
	console.log(`Fatia número ${c}`)
	c++				// Sempre que o bloco rodar, somará 1
}
console.log('cabo a pizza') // Depois que o bloco se tornar falso, ou seja, depois que c passar a ser 9, aí sim as próximas linhas serão executadas.

Mas há uma outra maneira também.
Nessa primeira forma acima, nós primeiro testamos a lógica, e depois executamos o bloco:

while (condição) {
	bloco
}



É possível fazer o contrário, primeiro executar o bloco e depois executar o teste.
E pra fazer isso?

do {
	bloco
} while (condição)
 
Essas são as duas primeiras repetições de Javascript.

A primeira nós chamamos de Estrutura de Repetição com Teste Lógico no Início

A segunda nós chamamos de Estrutura de Repetição com Teste Lógico no Final.

A primeira é a mais encontrada entre os programas. Eventualmente na sua vida, surgirá a necessidade de utilizar a segunda forma, não se preocupe.